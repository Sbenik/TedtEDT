#Область ПриОткрытиеФормы

&НаСервере
Процедура ОбновитьСписок()
	ТЗДляОтображения.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникЛБТ_ЗадачиАвтоматизации.Ссылка КАК Ссылка,
	|	СправочникЛБТ_ЗадачиАвтоматизации.ТипОбъекта КАК ТипОбъекта,
	|	СправочникЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок КАК ФункциональныйБлок,
	|	СправочникЛБТ_ЗадачиАвтоматизации.Типовой КАК Типовой,
	|	СУММА(ЛБТ_ТипыЗадачДанныеСправочника.Нормочасы) КАК Нормочасы,
	|	ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.Шаблон КАК Шаблон,
	|	ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.НазваниеТипаЗадачи КАК НазваниеТипаЗадачи,
	|	СправочникЛБТ_ЗадачиАвтоматизации.КонфигурацииСтрокой КАК КонфигурацииСтрокой
	|ИЗ
	|	Справочник.ЛБТ_ЗадачиАвтоматизации КАК СправочникЛБТ_ЗадачиАвтоматизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛБТ_ТипыЗадач.ДанныеСправочника КАК ЛБТ_ТипыЗадачДанныеСправочника
	|		ПО СправочникЛБТ_ЗадачиАвтоматизации.ТипОбъекта = ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.НазваниеТипаЗадачи
	|ГДЕ
	|	НЕ ЛБТ_ТипыЗадачДанныеСправочника.СодержаниеРабот В (&СодержаниеРабот)
	|	И ВЫБОР
	|			КОГДА &ТипОбъекта <> ЛОЖЬ
	|				ТОГДА СправочникЛБТ_ЗадачиАвтоматизации.ТипОбъекта = &ТипОбъекта
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ФункциональныйБлок <> ЛОЖЬ
	|				ТОГДА СправочникЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок = &ФункциональныйБлок
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Конфигурация <> ЛОЖЬ
	|				ТОГДА СправочникЛБТ_ЗадачиАвтоматизации.Конфигурации.Конфигурация = &Конфигурация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Шаблон <> ЛОЖЬ
	|				ТОГДА ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.Шаблон = &Шаблон
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Типовой <> НЕОПРЕДЕЛЕНО
	|				ТОГДА СправочникЛБТ_ЗадачиАвтоматизации.Типовой = &Типовой
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Направление <> ЛОЖЬ
	|				ТОГДА ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.Направление = &Направление
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СправочникЛБТ_ЗадачиАвтоматизации.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникЛБТ_ЗадачиАвтоматизации.Ссылка,
	|	СправочникЛБТ_ЗадачиАвтоматизации.ТипОбъекта,
	|	СправочникЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок,
	|	СправочникЛБТ_ЗадачиАвтоматизации.Типовой,
	|	ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.Шаблон,
	|	ЛБТ_ТипыЗадачДанныеСправочника.Ссылка.НазваниеТипаЗадачи,
	|	СправочникЛБТ_ЗадачиАвтоматизации.КонфигурацииСтрокой";
	
	Если ЗначениеЗаполнено(ФильтрФункциональныйБлок) Тогда 
		Запрос.УстановитьПараметр("ФункциональныйБлок",ФильтрФункциональныйБлок); 
	Иначе
		Запрос.УстановитьПараметр("ФункциональныйБлок",ЛОЖЬ);
	КонецЕсли;  
	
	Если  ЗначениеЗаполнено(ФильтрТипНазвания) Тогда
		Запрос.УстановитьПараметр("ТипОбъекта",ФильтрТипНазвания);
	Иначе
		Запрос.УстановитьПараметр("ТипОбъекта",ЛОЖЬ); 
	КонецЕсли; 
	
	Если  ЗначениеЗаполнено(ФильтрКонфигурация) Тогда
		Запрос.УстановитьПараметр("Конфигурация",ФильтрКонфигурация);
	Иначе
		Запрос.УстановитьПараметр("Конфигурация",ЛОЖЬ); 
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Запрос.УстановитьПараметр("Направление",НаправлениеДеятельности);
	Иначе
		Запрос.УстановитьПараметр("Направление",ЛОЖЬ); 
	КонецЕсли;

	
	Запрос.УстановитьПараметр("Шаблон",Шаблон);
	
	Запрос.УстановитьПараметр("СодержаниеРабот",ИсключитьВидыРабот);
	
	// 2 ложь
	Если  ФильтрТиповой = 1 Тогда
		Запрос.УстановитьПараметр("Типовой",Истина);
	ИначеЕсли
		ФильтрТиповой = 2 Тогда
		Запрос.УстановитьПараметр("Типовой",Ложь);
	Иначе
		//Запрос.УстановитьПараметр("Типовой",ЛОЖЬ); 

		Запрос.УстановитьПараметр("Типовой",Неопределено); 
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	  	стрТЗ = ТЗДляОтображения.Добавить();
		стрТЗ.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		стрТЗ.НазваниеЗадачи = ВыборкаДетальныеЗаписи.ТипОбъекта;
		стрТЗ.Конфигурация = ВыборкаДетальныеЗаписи.КонфигурацииСтрокой;
		стрТЗ.ФункциональныйБлок = ВыборкаДетальныеЗаписи.ФункциональныйБлок;
		стрТЗ.Нормочасы = ВыборкаДетальныеЗаписи.Нормочасы;
		стрТЗ.ОбъемРабот = СтоимостьЧасаРабот * ВыборкаДетальныеЗаписи.Нормочасы; 
		стрТЗ.Типовой = ВыборкаДетальныеЗаписи.Типовой; 
		Если ТаблицаДляВыводаСлужебная.НайтиСтроки(Новый Структура("Ссылка",ВыборкаДетальныеЗаписи.Ссылка)).Количество() > 0 Тогда
			стрТЗ.ДобавитьВПроект = Истина; 
			Для Каждого Строчка Из ТаблицаДляВыводаСлужебная цикл
				Если Строчка.Ссылка = стрТЗ.Ссылка Тогда
					стрТЗ.ОбязательноНа1Этапе = Строчка.ОбязательноНа1Этапе;
				КонецЕсли;
			КонецЦикла;
		Иначе
			стрТЗ.ДобавитьВПроект = Ложь;
			Для Каждого Строчка Из ТаблицаДляВыводаСлужебная цикл
				Если Строчка.Ссылка = стрТЗ.Ссылка Тогда
					стрТЗ.ОбязательноНа1Этапе = Строчка.ОбязательноНа1Этапе;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  
	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	
	ВладелецФормы.СохранитьДанные(ТаблицаДляВыводаСлужебная);
	ОбновитьСписок();
	КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
 	ФильтрКонфигурация = Параметры.Конфигурация;
	СтоимостьЧасаРабот = Параметры.СтоимостьЧасаРабот;
	Шаблон = Параметры.Шаблон;
	ИсключитьВидыРабот = Параметры.ИсключитьВидыРабот;
	НаправлениеДеятельности = Параметры.НаправлениеДеятельности;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПеренестиВПроект(Команда)
	
	ВладелецФормы.ОбработатьВыборЗадач(ТЗДляОтображения);
	Закрыть();
	
КонецПроцедуры

#Область ФильтТаблицыВывода

&НаКлиенте
Процедура ФильтрТипНазванияПриИзменении(Элемент)
 
	ОбновитьСписок(); 
	
	КонецПроцедуры

&НаКлиенте
Процедура ФильтрФункциональныйБлокПриИзменении(Элемент)
		ОбновитьСписок();		
КонецПроцедуры

&НаКлиенте
Процедура ФильтрКонфигурацияПриИзменении(Элемент)
	
	ОбновитьСписок(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрТиповойПриИзменении(Элемент)
		ОбновитьСписок();	
	КонецПроцедуры  
	
&НаСервере
Процедура ТЗДляОтображенияДобавитьВПроектПриИзмененииНаСервере(ИндексЭлемента)
	
	ЭлементДляПоиска = ТЗДляОтображения.НайтиПоИдентификатору(ИндексЭлемента);
	МассивНайденныхСтрок = ТаблицаДляВыводаСлужебная.НайтиСтроки(Новый Структура("Ссылка",ЭлементДляПоиска.Ссылка));
	Если МассивНайденныхСтрок.Количество() = 0 Тогда
		СтрокаДанных 									= ТаблицаДляВыводаСлужебная.Добавить();
		СтрокаДанных.НазваниеЗадачи						= ЭлементДляПоиска.НазваниеЗадачи; 
		СтрокаДанных.Ссылка 							= ЭлементДляПоиска.Ссылка;		
		СтрокаДанных.Конфигурация 						= ЭлементДляПоиска.Конфигурация; 
		СтрокаДанных.ФункциональныйБлок					= ЭлементДляПоиска.ФункциональныйБлок;
		СтрокаДанных.Нормочасы 							= ЭлементДляПоиска.Нормочасы;
		СтрокаДанных.ОбъемРабот							= ЭлементДляПоиска.ОбъемРабот; 
		СтрокаДанных.Типовой							= ЭлементДляПоиска.Типовой; 
		СтрокаДанных.ДобавитьВПроект 					= ЭлементДляПоиска.ДобавитьВПроект;
	Иначе
		ТаблицаДляВыводаСлужебная.Удалить(МассивНайденныхСтрок[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗДляОтображенияДобавитьВПроектПриИзменении(Элемент)
	ТЗДляОтображенияДобавитьВПроектПриИзмененииНаСервере(Элементы.ТЗДляОтображения.ВыделенныеСтроки[0]);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповестить("ОбновитьДеревоЗначенийНаФормеСоставаРабот");
КонецПроцедуры

#КонецОбласти









