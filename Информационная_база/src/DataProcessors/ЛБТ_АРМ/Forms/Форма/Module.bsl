
&НаКлиенте
Процедура ВыборЗадач(Команда)
	Если не ЗначениеЗаполнено(Объект.Шаблон) Тогда
		Сообщить("Шаблон не выбран");
		Возврат;
	КонецЕсли;	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Конфигурация", Объект.Конфигурация);
	ПараметрыОтбора.Вставить("СтоимостьЧасаРабот",СтоимостьЧасаРабот);
	ПараметрыОтбора.Вставить("Шаблон",Объект.Шаблон);
	ПараметрыОтбора.Вставить("ИсключитьВидыРабот",ТЗИсключитьВидыРабот);
	ПараметрыОтбора.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	ФормаВыбора = ОткрытьФорму("Справочник.ЛБТ_ЗадачиАвтоматизации.ФормаВыбора", ПараметрыОтбора, ЭтаФорма );
	
КонецПроцедуры

#Область ТаблицыВыводаИнформаци

&НаКлиенте
Процедура СохранитьДанные(ТаблицаДляВыводаСлужебная) Экспорт 
	
	ТаблицаДляВыводаСлужебная.Очистить();  
	Для Каждого Строка Из ТаблицаЭлементовДобавленныхВПроект Цикл  
			
			СтрокаДанных 									= ТаблицаДляВыводаСлужебная.Добавить();
			СтрокаДанных.НазваниеЗадачи						= Строка.НазваниеЗадачи; 
			СтрокаДанных.Ссылка 							= Строка.Ссылка;		
			СтрокаДанных.Конфигурация 						= Строка.Конфигурация; 
			СтрокаДанных.ФункциональныйБлок					= Строка.ФункциональныйБлок;
			СтрокаДанных.Нормочасы 							= Строка.Нормочасы;
			СтрокаДанных.ОбъемРабот							= Строка.ОбъемРабот; 
			СтрокаДанных.Типовой							= Строка.Типовой; 
			СтрокаДанных.ДобавитьВПроект 					= Строка.ДобавитьВПроект; 
			СтрокаДанных.ОбязательноНа1Этапе				= Строка.ОбязательноНа1Этапе;			
	КонецЦикла; 
		
КонецПроцедуры  
	
&НаКлиенте
Процедура ОбработатьВыборЗадач(ТЗДляОтображения) Экспорт 
	 
	Массив = Новый массив; 
	Для Каждого Элемента Из ТаблицаЭлементовДобавленныхВПроект Цикл
		Массив.Добавить(Элемента); 
	КонецЦикла;	
	
	ТаблицаЭлементовДобавленныхВПроект.Очистить();

	Для Каждого Строка Из ТЗДляОтображения Цикл
		Если Строка.ДобавитьВПроект = Истина Тогда
			СтрокаДанных 						= ТаблицаЭлементовДобавленныхВПроект.Добавить();
			СтрокаДанных.НазваниеЗадачи			= Строка.НазваниеЗадачи;
			СтрокаДанных.Ссылка 				= Строка.Ссылка;
			СтрокаДанных.Конфигурация 			= Строка.Конфигурация; 
			СтрокаДанных.ФункциональныйБлок		= Строка.ФункциональныйБлок;
			СтрокаДанных.Нормочасы 				= Строка.Нормочасы;
			СтрокаДанных.ОбъемРабот				= Строка.ОбъемРабот; 
			СтрокаДанных.Типовой				= Строка.Типовой; 
			СтрокаДанных.ДобавитьВПроект 		= Строка.ДобавитьВПроект; 
			СтрокаДанных.ОбязательноНа1Этапе 	= Истина;
			Для каждого Элемента Из Массив цикл
				Если СтрокаДанных.Ссылка = Элемента.Ссылка 
				Тогда
				СтрокаДанных.ОбязательноНа1Этапе = Элемента.ОбязательноНа1Этапе; 
				Прервать; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
	КонецЦикла; 
	Массив.Очистить();

	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СоставРаботПроект

&НаКлиенте
Процедура СоставРаботПроекта(Команда)
	Модифицированность = истина;
	ОткрытьФорму("Обработка.ЛБТ_АРМ.Форма.ФормаСоставРабот",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТЗВДочернююФорму(ТЗДляКопирования) Экспорт
	
	Для каждого стр из ТаблицаЭлементовДобавленныхВПроект Цикл
		стрН = ТЗДляКопирования.Добавить();
		стрН.ФункциональныйБлок = стр.ФункциональныйБлок;
		стрН.ОбъемРабот = стр.ОбъемРабот;
		стрН.Нормочасы = стр.Нормочасы;
		стрН.Ссылка = стр.Ссылка;
		стрН.ОбязательноНа1Этапе = стр.ОбязательноНа1Этапе;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСписокЗадач(СписокЗадачИсключить) Экспорт
	
	Для каждого стр из СписокЗадачИсключить Цикл
		
		МассивНайденныхСтрок = ТаблицаЭлементовДобавленныхВПроект.НайтиСтроки(Новый Структура("Ссылка",стр.Значение));
		
		Для каждого стр из МассивНайденныхСтрок Цикл
			ТаблицаЭлементовДобавленныхВПроект.Удалить(стр);
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбязательноНа1Этапе(МассивИзменитьЗадачи, БулевоЗначение) Экспорт
	
	Для каждого стр из МассивИзменитьЗадачи Цикл
		
		НайденнаяСтрока = ТаблицаЭлементовДобавленныхВПроект.НайтиСтроки(Новый Структура("Ссылка",стр))[0];
		
		НайденнаяСтрока.ОбязательноНа1Этапе = БулевоЗначение;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДанныеИзДокументаВАРМ()
	
	НовыйДокумент = СсылкаНаДокумент.ПолучитьОбъект();
	
	НазваниеПроекта = НовыйДокумент.Наименование;
	Объект.НаправлениеДеятельности = НовыйДокумент.НаправлениеДеятельности;
	Объект.Конфигурация = НовыйДокумент.Конфигурация;
	Объект.Шаблон = НовыйДокумент.Шаблон;
	Объект.МасштабВнедрения = НовыйДокумент.МасштабВнедрения;
	СтоимостьЧасаРабот = НовыйДокумент.СтоимостьЧасаРабот;
	СтоимостьРабот = НовыйДокумент.СтоимостьРабот;
	РезервВремени = НовыйДокумент.РезервВремени;
	КоличествоЧасовОбщее = НовыйДокумент.КоличествоЧасов;
	КоэффициентСтоимости = НовыйДокумент.Коэффициент;
	ИтоговаяСтоимость = НовыйДокумент.ИтоговаяСтоимость;
	
	ТаблицаЭлементовДобавленныхВПроект.Очистить();
	Для каждого стр из НовыйДокумент.РаботыПоПроекту Цикл
		стрДок = ТаблицаЭлементовДобавленныхВПроект.Добавить();
		стрДок.Ссылка = стр.ЗадачаАвтоматизации;
		стрДок.ОбъемРабот = стр.ОбъемРабот;
		стрДок.Нормочасы = стр.Нормочасы;
		стрДок.ФункциональныйБлок = стр.ФункциональныйБлок;
		стрДок.Типовой = стр.Типовой;
		стрДок.ОбязательноНа1Этапе = стр.ОбязательноНа1Этапе;
	КонецЦикла;
	
	ТЗИсключитьВидыРабот.Очистить();
	Для каждого стрИсключить из НовыйДокумент.ИсключенныеВидыРабот Цикл
		новаяСтрИсключить = ТЗИсключитьВидыРабот.Добавить(стрИсключить.ВидРабот);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	СсылкаНаДокумент = РезультатВыбора;
	Элементы.СоздатьДокумент.Видимость = ЛОЖЬ;
	Элементы.СохранитьДокумент.Видимость = ИСТИНА;
	ЗаполнитьДанныеИзДокументаВАРМ();
	Если ТЗИсключитьВидыРабот.Количество() > 0 Тогда
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Некоторые виды работ исключены";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ТемноКрасный;
	Иначе 
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Включены все виды работ";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ЦветМорскойВолны;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыРабот(Команда)
	Модифицированность = истина;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Шаблон",Объект.Шаблон);
	ПараметрыОткрытия.Вставить("Конфигурация",Объект.Конфигурация);
	ПараметрыОткрытия.Вставить("ТЗДляПередачи",ТЗИсключитьВидыРабот);
	ОткрытьФорму("Обработка.ЛБТ_АРМ.Форма.ФормаВыбораВидовРабот",ПараметрыОткрытия, ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВидовЗадач(ТЗДляПередачи) Экспорт
	
	ТЗИсключитьВидыРабот.Очистить();
	
	Для каждого стр из ТЗДляПередачи Цикл
		ТЗИсключитьВидыРабот.Добавить(стр.Наименование);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	Если ТЗИсключитьВидыРабот.Количество() > 0 Тогда
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Некоторые виды работ исключены";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ТемноКрасный;
	Иначе 
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Включены все виды работ";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ЦветМорскойВолны;
	КонецЕсли;
	
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабВнедренияПриИзменении(Элемент)
	МасштабВнедренияПриИзмененииНаСервере();
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
	Модифицированность = истина;
КонецПроцедуры

&НаСервере
Процедура МасштабВнедренияПриИзмененииНаСервере()
	КоэффициентСтоимости = Объект.МасштабВнедрения.ПолучитьОбъект().Коэфициент;
КонецПроцедуры

#Область КомандаРассчитатьПроект

&НаСервере
Процедура ДобавитьЗадачиВПроект()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛБТ_ЗадачиАвтоматизации.Ссылка КАК Ссылка,
	|	СУММА(ЛБТ_ТипыЗадачДанныеСправочника.Нормочасы) КАК Нормочасы,
	|	СУММА(ЛБТ_ТипыЗадачДанныеСправочника.Нормочасы) * &СтоимостьЧаса КАК ОбъемРабот,
	|	ЛБТ_ЗадачиАвтоматизации.КонфигурацииСтрокой КАК КонфигурацииСтрокой,
	|	ЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок КАК ФункциональныйБлок,
	|	ЛБТ_ЗадачиАвтоматизации.Типовой КАК Типовой,
	|	ЛБТ_ЗадачиАвтоматизации.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	Справочник.ЛБТ_ТипыЗадач КАК ЛБТ_ТипыЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛБТ_ТипыЗадач.ДанныеСправочника КАК ЛБТ_ТипыЗадачДанныеСправочника
	|		ПО (ЛБТ_ТипыЗадачДанныеСправочника.Ссылка = ЛБТ_ТипыЗадач.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛБТ_ЗадачиАвтоматизации КАК ЛБТ_ЗадачиАвтоматизации
	|		ПО ЛБТ_ТипыЗадач.НазваниеТипаЗадачи = ЛБТ_ЗадачиАвтоматизации.ТипОбъекта
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Шаблон <> ЛОЖЬ
	|				ТОГДА ЛБТ_ТипыЗадач.Шаблон = &Шаблон
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Направление <> ЛОЖЬ
	|				ТОГДА ЛБТ_ТипыЗадач.Направление = &Направление
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Конфигурация <> ЛОЖЬ
	|				ТОГДА ЛБТ_ЗадачиАвтоматизации.Конфигурации.Конфигурация = &Конфигурация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСпискуСсылок <> ЛОЖЬ
	|				ТОГДА ЛБТ_ЗадачиАвтоматизации.Ссылка В (&СписокСсылокЗадач)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЛБТ_ТипыЗадач.ПоУмолчанию = ИСТИНА
	|	И НЕ ЛБТ_ТипыЗадачДанныеСправочника.СодержаниеРабот В (&СодержаниеРабот)
	|	И ЛБТ_ЗадачиАвтоматизации.ПометкаУдаления = ЛОЖЬ
	|	И ЛБТ_ТипыЗадач.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛБТ_ЗадачиАвтоматизации.Ссылка,
	|	ЛБТ_ЗадачиАвтоматизации.КонфигурацииСтрокой,
	|	ЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок,
	|	ЛБТ_ЗадачиАвтоматизации.Типовой,
	|	ЛБТ_ЗадачиАвтоматизации.ТипОбъекта";
	
		Если  ЗначениеЗаполнено(СтоимостьЧасаРабот) Тогда
		Запрос.УстановитьПараметр("СтоимостьЧаса",СтоимостьЧасаРабот);
	Иначе
		Запрос.УстановитьПараметр("СтоимостьЧаса",0); 
	КонецЕсли;
	Если  ЗначениеЗаполнено(Объект.Шаблон) Тогда
		Запрос.УстановитьПараметр("Шаблон",Объект.Шаблон);
	Иначе
		Запрос.УстановитьПараметр("Шаблон",ЛОЖЬ); 
	КонецЕсли;
	Если  ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		Запрос.УстановитьПараметр("Направление",Объект.НаправлениеДеятельности);
	Иначе
		Запрос.УстановитьПараметр("Направление",ЛОЖЬ); 
	КонецЕсли;
	Если  ЗначениеЗаполнено(Объект.Конфигурация) Тогда
		Запрос.УстановитьПараметр("Конфигурация",Объект.Конфигурация);
	Иначе
		Запрос.УстановитьПараметр("Конфигурация",ЛОЖЬ); 
	КонецЕсли;
	Запрос.УстановитьПараметр("СодержаниеРабот",ТЗИсключитьВидыРабот);
	
	МассивСсылок = Новый массив;
	Для каждого стр из ТаблицаЭлементовДобавленныхВПроект Цикл
		МассивСсылок.Добавить(стр.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СписокСсылокЗадач",МассивСсылок);
	Если МассивСсылок.Количество() > 0 и не ПередобавитьЗадачи Тогда
		Запрос.УстановитьПараметр("ОтборПоСпискуСсылок",истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСпискуСсылок",Ложь); 
	КонецЕсли;

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	
	
	Массив = Новый массив; 
	Для Каждого Элемента Из ТаблицаЭлементовДобавленныхВПроект Цикл
		Массив.Добавить(Элемента); 
	КонецЦикла;
		
	ТаблицаЭлементовДобавленныхВПроект.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		стр = ТаблицаЭлементовДобавленныхВПроект.Добавить();
		стр.НазваниеЗадачи = ВыборкаДетальныеЗаписи.ТипОбъекта;
		стр.Конфигурация = ВыборкаДетальныеЗаписи.КонфигурацииСтрокой;
		стр.ФункциональныйБлок = ВыборкаДетальныеЗаписи.ФункциональныйБлок;
		стр.ОбъемРабот = ВыборкаДетальныеЗаписи.ОбъемРабот;
		стр.Типовой = ВыборкаДетальныеЗаписи.Типовой;
		стр.ДобавитьВПроект = Истина;
		стр.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		стр.Нормочасы = ВыборкаДетальныеЗаписи.Нормочасы;
		стр.ОбязательноНа1Этапе = Истина;
	Для каждого Элемента Из Массив цикл
			Если стр.Ссылка = Элемента.Ссылка 
			Тогда
			стр.ОбязательноНа1Этапе = Элемента.ОбязательноНа1Этапе; 
			Прервать;
		КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	массив.Очистить();
	
	
	ПередобавитьЗадачи = ложь;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроект(Команда)
	Модифицированность = истина;
	
	Если не ЗначениеЗаполнено(Объект.Шаблон) Тогда
		Сообщить("Шаблон не заполнен.");
		Возврат;
	КонецЕсли;
	
	ДобавитьЗадачиВПроект();
	РассчитатьСтоимостьПроекта();

	Элементы.ГруппаТребуетсяПересчет.Видимость = ложь;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьПроекта()
	
	СтоимостьПроекта = 0;
	ОбщееКоличествоЧасов = 0;
	
	Для каждого стр из ТаблицаЭлементовДобавленныхВПроект Цикл
		
		СтоимостьПроекта = СтоимостьПроекта + стр.ОбъемРабот;
		ОбщееКоличествоЧасов = ОбщееКоличествоЧасов + стр.Нормочасы;
				
	КонецЦикла;
	
	СтоимостьРабот = СтоимостьПроекта;
	КоличествоЧасовОбщее = ОбщееКоличествоЧасов;
	
	ИтоговаяСтоимость = (СтоимостьРабот + РезервВремени*СтоимостьЧасаРабот)*КоэффициентСтоимости;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СоздатьДокументНаСервере()
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		НовыйДокумент = СсылкаНаДокумент.ПолучитьОбъект();
	Иначе
		НовыйДокумент = Документы.ЛБТ_ПроектВнедрения.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НовыйДокумент.Наименование = НазваниеПроекта;
	НовыйДокумент.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	НовыйДокумент.Конфигурация = Объект.Конфигурация;
	НовыйДокумент.Шаблон = Объект.Шаблон;
	НовыйДокумент.МасштабВнедрения = Объект.МасштабВнедрения;
	НовыйДокумент.СтоимостьЧасаРабот = СтоимостьЧасаРабот;
	НовыйДокумент.СтоимостьРабот = СтоимостьРабот;
	НовыйДокумент.РезервВремени = РезервВремени;
	НовыйДокумент.КоличествоЧасов = КоличествоЧасовОбщее;
	НовыйДокумент.Коэффициент = КоэффициентСтоимости;
	НовыйДокумент.ИтоговаяСтоимость = ИтоговаяСтоимость;
	
	НовыйДокумент.РаботыПоПроекту.Очистить();
	Для каждого стр из ТаблицаЭлементовДобавленныхВПроект Цикл
		стрДок = НовыйДокумент.РаботыПоПроекту.Добавить();
		стрДок.ТипЗадачи = стр.НазваниеЗадачи;
		стрДок.ЗадачаАвтоматизации = стр.Ссылка;
		стрДок.ОбъемРабот = стр.ОбъемРабот;
		стрДок.Нормочасы = стр.Нормочасы;
		стрДок.ФункциональныйБлок = стр.ФункциональныйБлок;
		стрДок.Типовой = стр.Типовой;
		стрДок.ОбязательноНа1Этапе = стр.ОбязательноНа1Этапе;
	КонецЦикла;
	
	НовыйДокумент.ИсключенныеВидыРабот.Очистить();
	Для каждого стрИсключить из ТЗИсключитьВидыРабот Цикл
		стрДокИсключить = НовыйДокумент.ИсключенныеВидыРабот.Добавить();
		стрДокИсключить.ВидРабот = стрИсключить;
	КонецЦикла;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	СсылкаНаДокумент = НовыйДокумент.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСоздатьДокумент",
	ЭтотОбъект);

	ПоказатьВопрос(Оповещение,
		"Будет создан новый документ. Продолжить?",
		РежимДиалогаВопрос.ДаНетОтмена,
		0,
		КодВозвратаДиалога.Да,
		"Предупреждение"
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСоздатьДокумент(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если не ЗначениеЗаполнено(НазваниеПроекта) Тогда
			Оповещение = Новый ОписаниеОповещения();
			ПоказатьПредупреждение(Оповещение, "Документ не создан! Название проекта не заполнено", 0, "Ошибка");
			Возврат;
		КонецЕсли;
		СоздатьДокументНаСервере();
		Элементы.СоздатьДокумент.Видимость = ЛОЖЬ;
		Элементы.СохранитьДокумент.Видимость = ИСТИНА; 
		Модифицированность = ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	ПередобавитьЗадачи = истина;
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
	Модифицированность = истина;
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацияПриИзменении(Элемент)
	ПередобавитьЗадачи = истина;
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
	Модифицированность = истина;
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	ПередобавитьЗадачи = истина;
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
	Модифицированность = истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СсылкаНаДокумент = Параметры.СсылкаНаДокумент;
КонецПроцедуры


#Область ПечатныеФормы  

//Процедура вызова печатной формы ПланПоБлокам

&НаКлиенте
Процедура ПланПоБлокам(Команда)
	ТабДок = ПечататьПоБлокамНаСервере();
	ТабДок.Показать();
КонецПроцедуры 

&НаСервере
Функция ПечататьНаСервереФункция() 
	
// Создание таблицыЗначений из ДанныхСтруктуры	

ТаблЗнач = Новый ТаблицаЗначений;
ТаблЗнач.Колонки.Добавить("ФункциональныйБлок");
ТаблЗнач.Колонки.Добавить("Нормочасы");
ТаблЗнач.Колонки.Добавить("ОбъемРабот");
Для Каждого Значения Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Строка = ТаблЗнач.Добавить();
	Строка.ФункциональныйБлок  = Значения.ФункциональныйБлок;
	Строка.Нормочасы           = Значения.Нормочасы;
	Строка.ОбъемРабот          = Значения.ОбъемРабот;
КонецЦикла;

ТаблЗнач.Свернуть("ФункциональныйБлок","Нормочасы,ОбъемРабот");

// получение макета  

ТабДок = Новый ТабличныйДокумент; 
Макет = Обработки.ЛБТ_АРМ.ПолучитьМакет("Макет"); 

//Получение и заполнение области ШапкаТаблицы

Область = Макет.ПолучитьОбласть("ШапкатаблицыПоБлокам");
Область.Параметры.Наименование = НазваниеПроекта;
Область.Параметры.СтоимостьЧасаРабот = СтоимостьЧасаРабот;
ТабДок.Вывести(Область); 
Высота = Область.ВысотаТаблицы;
//Получение и заполнение области ШапкаТаблицы2

Область = Макет.ПолучитьОбласть("Подшапка2");
Область.Параметры.Дата = Формат(ТекущаяДата(),("ДЛФ=ДД"));
ТабДок.Присоединить(Область); 


НомерСтроки = 1;
Область = Макет.ПолучитьОбласть("Код"); 
ТабДок.Вывести(Область); 
Высота = Высота+1;

Область = Макет.ПолучитьОбласть("Наименование"); 
ТабДок.Присоединить(Область); 

Область = Макет.ПолучитьОбласть("Подшапка3");
ТабДок.Присоединить(Область); 

Для Каждого Строка Из ТаблЗнач Цикл
		Область = Макет.ПолучитьОбласть("НомерКода");
		Область.Параметры.Код = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");	
		ТабДок.Вывести(Область); 
		Область = Макет.ПолучитьОбласть("Бизнес");
		Область.Параметры.НаименованиеБизнесПроцесса = Строка.ФункциональныйБлок;
		ТабДок.Присоединить(Область);
		НомерСтроки =НомерСтроки+1;
		Для Каждого Элемент Из ТаблЗнач Цикл 
		Область = Макет.ПолучитьОбласть("СтрокаТаблицы2");	
	Если  Строка.ФункциональныйБлок = Элемент.ФункциональныйБлок тогда	
	Область.Параметры.Нормочасы = Элемент.Нормочасы;
	Область.Параметры.Стоимость = Элемент.ОбъемРабот;
	ТабДок.Присоединить(Область);
	Высота = Высота+1;
	КонецЕсли;
КонецЦикла;
КонецЦикла; 
	
	
Область = Макет.ПолучитьОбласть("ПодвалКод"); 
Область.Параметры.Код3 = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");	
ТабДок.Вывести(Область); 
Высота = Высота + Область.ВысотаТаблицы;

Область = Макет.ПолучитьОбласть("ПодвалНаименование");	
ТабДок.Присоединить(Область); 

//Получение и заполнение области ПодвалТаблицы2

Область = Макет.ПолучитьОбласть("ПодвалТаблицы2");
Область.Параметры.ОбщаяСумма = 0; 
Область.Параметры.ОбщееКоличествоЧасов = 0;
Для Каждого Строка Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Область.Параметры.ОбщаяСумма = Область.Параметры.ОбщаяСумма + Строка.ОбъемРабот;
	Область.Параметры.ОбщееКоличествоЧасов = Область.Параметры.ОбщееКоличествоЧасов + Строка.Нормочасы;
КонецЦикла;

Область.Параметры.РезервЧасов = РезервВремени;
Область.Параметры.РезервСуммы = РезервВремени * СтоимостьЧасаРабот;
Область.Параметры.ИтогоЧасов  = Область.Параметры.РезервЧасов + Область.Параметры.ОбщееКоличествоЧасов;
Область.Параметры.ИтогоДенег  = Область.Параметры.РезервСуммы + Область.Параметры.ОбщаяСумма;
ТабДок.Присоединить(Область);

////Получение и заполнение области Подвал

Область = Макет.ПолучитьОбласть("ПодПодвал");
ТабДок.Вывести(Область);  

Область = Макет.ПолучитьОбласть("ПодПодвал2");
ТабДок.Присоединить(Область);

ТабДок.АвтоМасштаб = Истина; 

//Получение и изменение настроек ячейки "Перечень этапов и задач"

ТабДок.Область("R3C1"+":"+"R3C5").Объединить();
Область = ТабДок.Область("R3C1"+":"+"R3C5");
Область.Текст = НазваниеПроекта;
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.Область("R10C1"+":"+"R10C5").Объединить();
Область = ТабДок.Область("R10C1"+":"+"R10C5");
Область.Текст = "Перечень этапов и задач.";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

Высота = Высота+2;
ТабДок.Область("R" + Высота + "C1"+":"+"R" + Высота + "C5").Объединить();
Область = ТабДок.Область("R" + Высота + "C1"+":"+"R" + Высота + "C5");
мШрифт = Новый Шрифт("Times New Roman", 11, Истина, , , ) ; 
Область.Шрифт = мШрифт; 
Область.Текст = "Подписи сторон";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.АвтоМасштаб = Истина;

Возврат ТабДок; 


КонецФункции

//Процедура вызова печатной формы ПланПоЗадачам

&НаКлиенте
Процедура ПланПоЗадачам(Команда)
	
	ТабДок = ПланПоЗадачамНаСервере();
	ТабДок.Показать();
	
КонецПроцедуры

&НаСервере
Функция ПланПоЗадачамНаСервере()
	
// Создание таблицыЗначений из ДанныхСтруктуры

ТаблЗнач = Новый ТаблицаЗначений;
ТаблЗнач.Колонки.Добавить("ФункциональныйБлок");
ТаблЗнач.Колонки.Добавить("Нормочасы");
ТаблЗнач.Колонки.Добавить("ОбъемРабот");
ТаблЗнач.Колонки.Добавить("ОбязательноНа1Этапе",Новый ОписаниеТипов("Булево"));
Для Каждого Значения Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Строка = ТаблЗнач.Добавить();
	Строка.ФункциональныйБлок  = Значения.ФункциональныйБлок;
	Строка.Нормочасы           = Значения.Нормочасы;
	Строка.ОбъемРабот          = Значения.ОбъемРабот;
	Строка.ОбязательноНа1Этапе = Значения.ОбязательноНа1Этапе;
КонецЦикла;
ТаблЗнач.Свернуть("ФункциональныйБлок","Нормочасы,ОбъемРабот,ОбязательноНа1Этапе");

// получение макета
ТабДок = Новый ТабличныйДокумент; 
Макет = Обработки.ЛБТ_АРМ.ПолучитьМакет("Макет");

//Получение и заполнение области ШапкаТаблицыЭлемента
Высота = 0;
Область = Макет.ПолучитьОбласть("ШапкаТаблицыЭлемента");
Область.Параметры.Наименование = НазваниеПроекта;
Область.Параметры.СтоимостьЧасаРабот = СтоимостьЧасаРабот;
ТабДок.Вывести(Область); 
Высота = Область.ВысотаТаблицы;
//Получение и заполнение области ШапкаТаблицыИтогов 

Область = Макет.ПолучитьОбласть("ШапкаТаблицыИтогов");
Область.Параметры.Дата = Формат(ТекущаяДата(),("ДЛФ=ДД"));
ТабДок.Присоединить(Область); 

//Получение и заполнение области СтрокаТаблицыЭлемента

Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭлемента");
НомерСтроки =1;
Для Каждого Строка Из ТаблЗнач Цикл
	Область.Параметры.Код = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");
	Область.Параметры.НаименованиеБизнесПроцесса = Строка.ФункциональныйБлок;	
	ТабДок.Вывести(Область);
	Высота = Высота + 1;		
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаТаблицыИтогов");
Для Каждого Элемент Из ТаблЗнач Цикл
	Если  Строка.ФункциональныйБлок = Элемент.ФункциональныйБлок тогда	
	ОбластьСтроки2.Параметры.Нормочасы = Элемент.Нормочасы;
	ОбластьСтроки2.Параметры.Стоимость = Элемент.ОбъемРабот;
	ОбластьСтроки2.Параметры.ОбязательноНа1Этапе = Элемент.ОбязательноНа1Этапе;
	ТабДок.Присоединить(ОбластьСтроки2);
	КонецЕсли;
КонецЦикла;
НомерСтроки2 = 1;

//Получение и заполнение области СтрокаТаблицыЭлементаРасширенная

ОбластьТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭлементаРасширенная"); 

Запрос = Новый Запрос;
Запрос.Текст =
"ВЫБРАТЬ
|	ЛБТ_ЗадачиАвтоматизации.Характеристика КАК Характеристика,
|	ЛБТ_ЗадачиАвтоматизации.Ссылка КАК Ссылка,
|	ЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок КАК ФункциональныйБлок,
|	ЛБТ_ЗадачиАвтоматизации.ТипОбъекта КАК ТипОбъекта
|ИЗ
|	Справочник.ЛБТ_ЗадачиАвтоматизации КАК ЛБТ_ЗадачиАвтоматизации
|ГДЕ
|	ЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок = &ФункциональныйБлок
|	И ЛБТ_ЗадачиАвтоматизации.ПометкаУдаления = ЛОЖЬ";

Запрос.УстановитьПараметр("ФункциональныйБлок",Строка.ФункциональныйБлок); 
РезультатЗапроса = Запрос.Выполнить();  

Результат = РезультатЗапроса.Выбрать();

Пока  Результат.Следующий() Цикл
		Для Каждого Строчка Из ТаблицаЭлементовДобавленныхВПроект Цикл
			Если Результат.Ссылка = Строчка.Ссылка и Результат.ФункциональныйБлок = Строка.ФункциональныйБлок Тогда
			ОбластьТаблицы.Параметры.Код2 = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=") + "." + Формат(НомерСтроки2, "ЧЦ=3; ЧВН=; ЧГ=");
			НомерСтроки2 =НомерСтроки2 + 1;
			ОбластьТаблицы.Параметры.НазваниеЗадачи = Результат.ТипОбъекта;
			ОбластьТаблицы.Параметры.БизнесПроцесс = Результат.Ссылка; 
			ОбластьТаблицы.Параметры.Характеристика = Результат.Характеристика;
			Высота = Высота + 1;

			ОбластьТаблицы2 = Макет.ПолучитьОбласть("СтрокаТаблицыИтоговРасширенная");
			ОбластьТаблицы2.Параметры.Стоимость = Строчка.ОбъемРабот;
			ОбластьТаблицы2.Параметры.Нормочасы = Строчка.Нормочасы;
			ОбластьТаблицы2.Параметры.ОбязательноНа1Этапе = Строчка.ОбязательноНа1Этапе;
			ТабДок.Вывести(ОбластьТаблицы); 
			ТабДок.Присоединить(ОбластьТаблицы2); 
		КонецЕсли;
	КонецЦикла;
КонецЦикла;
НомерСтроки2 = 1;
НомерСтроки =НомерСтроки+1;
КонецЦикла;
 
//Получение и заполнение области ПодвалТаблицыЭлемента

Область = Макет.ПолучитьОбласть("ПодвалТаблицыЭлемента");
Область.Параметры.код3 = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");
ТабДок.Вывести(Область);
Высота = Высота + Область.ВысотаТаблицы;
//Получение и заполнение области ПодвалТаблицыИтогов

Область = Макет.ПолучитьОбласть("ПодвалТаблицыИтогов");
Область.Параметры.ОбщаяСумма = 0; 
Область.Параметры.ОбщееКоличествоЧасов = 0;
Для Каждого Строка Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Область.Параметры.ОбщаяСумма = Область.Параметры.ОбщаяСумма + Строка.ОбъемРабот;
	Область.Параметры.ОбщееКоличествоЧасов = Область.Параметры.ОбщееКоличествоЧасов + Строка.Нормочасы;
КонецЦикла;

Область.Параметры.РезервЧасов = РезервВремени;
Область.Параметры.РезервСуммы = РезервВремени * СтоимостьЧасаРабот;
Область.Параметры.ИтогоЧасов  = Область.Параметры.РезервЧасов + Область.Параметры.ОбщееКоличествоЧасов;
Область.Параметры.ИтогоДенег  = Область.Параметры.РезервСуммы + Область.Параметры.ОбщаяСумма;
ТабДок.Присоединить(Область);

//Получение и заполнение области Подвал

Область = Макет.ПолучитьОбласть("ПодвалЗаказчикПоЗадачам");
ТабДок.Вывести(Область); 

Область = Макет.ПолучитьОбласть("ПодвалИсполнительПоЗадачам");
ТабДок.Присоединить(Область); 

//Получение и изменение настроек "Перечень этапов и задач"

ТабДок.Область("R3C1"+":"+"R3C7").Объединить();
Область = ТабДок.Область("R3C1"+":"+"R3C7");
Область.Текст = НазваниеПроекта;
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.Область("R10C1"+":"+"R10C7").Объединить();
Область = ТабДок.Область("R10C1"+":"+"R10C7");
Область.Текст = "Перечень этапов и задач.";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

Высота = Высота + 2;
ТабДок.Область("R" + Высота + "C1"+":"+"R" + Высота + "C7").Объединить();
Область = ТабДок.Область("R" + Высота + "C1"+":"+"R" + Высота + "C7");
мШрифт = Новый Шрифт("Times New Roman", 11, Истина, , , ) ; 
Область.Шрифт = мШрифт; 
Область.Текст = "Подписи сторон";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
ТабДок.АвтоМасштаб = Истина; 

Возврат ТабДок;


КонецФункции

//Процедура вызова печатной формы ПланПоРаботам

&НаКлиенте
Процедура ПланПоРаботам()
	
	ТабДок = ПланПоРаботамНаСервере();
	ТабДок.Показать();
	
КонецПроцедуры

&НаСервере
Функция ПланПоРаботамНаСервере()

// Создание таблицыЗначений из ДанныхСтруктуры

ТаблЗнач = Новый ТаблицаЗначений;
ТаблЗнач.Колонки.Добавить("ФункциональныйБлок");
ТаблЗнач.Колонки.Добавить("Нормочасы");
ТаблЗнач.Колонки.Добавить("ОбъемРабот");
ТаблЗнач.Колонки.Добавить("ОбязательноНа1Этапе",Новый ОписаниеТипов("Булево"));
Для Каждого Значения Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Строка = ТаблЗнач.Добавить();
	Строка.ФункциональныйБлок  = Значения.ФункциональныйБлок;
	Строка.Нормочасы           = Значения.Нормочасы;
	Строка.ОбъемРабот          = Значения.ОбъемРабот;
	Строка.ОбязательноНа1Этапе = Значения.ОбязательноНа1Этапе;
КонецЦикла;
ТаблЗнач.Свернуть("ФункциональныйБлок","Нормочасы,ОбъемРабот,ОбязательноНа1Этапе");

// получение макета 

ТабДок = Новый ТабличныйДокумент; 
Макет  = Обработки.ЛБТ_АРМ.ПолучитьМакет("Макет"); 

//Получение и заполнение области ШапкаТаблицыЭлемента

Область = Макет.ПолучитьОбласть("ШапкаТаблицыЭлемента"); 
Область.Параметры.Наименование 		 = НазваниеПроекта;
Область.Параметры.СтоимостьЧасаРабот = СтоимостьЧасаРабот;
ТабДок.Вывести(Область); 

//Получение и заполнение области ШапкаТаблицыПоРаботе

Область = Макет.ПолучитьОбласть("ШапкаТаблицыПоРаботе");
ТабДок.Присоединить(Область);

//Получение и заполнение области ШапкаТаблицыИтогов 

Область = Макет.ПолучитьОбласть("ШапкаТаблицыИтогов");
Область.Параметры.Дата = Формат(ТекущаяДата(),("ДЛФ=ДД"));
ТабДок.Присоединить(Область); 


//Получение и заполнение области СтрокаТаблицыЭлемента  

Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭлемента");
НомерСтроки =1;
Для Каждого Строка Из ТаблЗнач Цикл
	Область.Параметры.Код = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");
	Область.Параметры.НаименованиеБизнесПроцесса = Строка.ФункциональныйБлок;	
	ТабДок.Вывести(Область);
	
	ОбластьСтрок = Макет.ПолучитьОбласть("ПустыеСтроки");
	ТабДок.Присоединить(ОбластьСтрок);
		
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаТаблицыИтогов");
Для Каждого Элемент Из ТаблЗнач Цикл
	Если  Строка.ФункциональныйБлок = Элемент.ФункциональныйБлок тогда	
	ОбластьСтроки2.Параметры.Нормочасы = Элемент.Нормочасы;
	ОбластьСтроки2.Параметры.Стоимость = Элемент.ОбъемРабот;
	ОбластьСтроки2.Параметры.ОбязательноНа1Этапе = Элемент.ОбязательноНа1Этапе;
	ТабДок.Присоединить(ОбластьСтроки2);
	КонецЕсли;
КонецЦикла;
НомерСтроки2 = 1;
ОбластьТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭлементаРасширенная"); 

Запрос = Новый Запрос;
Запрос.Текст =
"ВЫБРАТЬ
|	ЛБТ_ЗадачиАвтоматизации.ТипОбъекта КАК ТипОбъекта,
|	ЛБТ_ЗадачиАвтоматизации.Характеристика КАК Характеристика,
|	ЛБТ_ЗадачиАвтоматизации.ФункциональныйБлок КАК ФункциональныйБлок,
|	ЛБТ_ТипыЗадачДанныеСправочника.Нормочасы КАК Нормочасы,
|	ЛБТ_ТипыЗадачДанныеСправочника.СодержаниеРабот КАК СодержаниеРабот,
|	ЛБТ_ЗадачиАвтоматизации.Наименование КАК Ссылка
|ИЗ
|	Справочник.ЛБТ_ТипыЗадач.ДанныеСправочника КАК ЛБТ_ТипыЗадачДанныеСправочника
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛБТ_ТипыЗадач КАК ЛБТ_ТипыЗадач
|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛБТ_ЗадачиАвтоматизации КАК ЛБТ_ЗадачиАвтоматизации
|			ПО (ЛБТ_ЗадачиАвтоматизации.ТипОбъекта = ЛБТ_ТипыЗадач.НазваниеТипаЗадачи)
|		ПО ЛБТ_ТипыЗадачДанныеСправочника.Ссылка = ЛБТ_ТипыЗадач.Ссылка
|ГДЕ
|	НЕ ЛБТ_ТипыЗадачДанныеСправочника.СодержаниеРабот В (&СодержаниеРабот)
|	И ЛБТ_ТипыЗадач.Шаблон = &Шаблон
|	И ЛБТ_ЗадачиАвтоматизации.ПометкаУдаления = ЛОЖЬ
|	И ЛБТ_ТипыЗадач.ПометкаУдаления = ЛОЖЬ";

Запрос.УстановитьПараметр("Шаблон",Объект.Шаблон);
Запрос.УстановитьПараметр("СодержаниеРабот",ТЗИсключитьВидыРабот);
РезультатЗапроса = Запрос.Выполнить();  

Результат = РезультатЗапроса.Выбрать();

Пока  Результат.Следующий() Цикл
		Для Каждого Строчка Из ТаблицаЭлементовДобавленныхВПроект Цикл
			Если Результат.Ссылка = Строчка.Ссылка.Наименование и Результат.ФункциональныйБлок = Строка.ФункциональныйБлок Тогда 
					ОбластьТаблицы3 = Макет.ПолучитьОбласть("СтрокаТаблицыПоРаботе");
					ОбластьТаблицы3.Параметры.ВидРабот = Результат.СодержаниеРабот;
					ОбластьТаблицы3.Параметры.ВыделенныеЧасы = Результат.Нормочасы;
					
					ОбластьТаблицы.Параметры.Код2 = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=") + "." + Формат(НомерСтроки2, "ЧЦ=3; ЧВН=; ЧГ=");
					НомерСтроки2 =НомерСтроки2 + 1;
					ОбластьТаблицы.Параметры.НазваниеЗадачи = Результат.ТипОбъекта;
					ОбластьТаблицы.Параметры.БизнесПроцесс = Результат.Ссылка; 
					ОбластьТаблицы.Параметры.Характеристика = Результат.Характеристика;	
           			ОбластьТаблицы2 = Макет.ПолучитьОбласть("СтрокаТаблицыИтоговРасширенная");
					ОбластьТаблицы2.Параметры.Стоимость = Строчка.ОбъемРабот;
					ОбластьТаблицы2.Параметры.Нормочасы = Строчка.Нормочасы;
					ОбластьТаблицы2.Параметры.ОбязательноНа1Этапе = Строчка.ОбязательноНа1Этапе;
						
			ТабДок.Вывести(ОбластьТаблицы);
			ТабДок.Присоединить(ОбластьТаблицы3);
			ТабДок.Присоединить(ОбластьТаблицы2);				 	
			КонецЕсли;
	КонецЦикла;
КонецЦикла;
НомерСтроки2 = 1;
НомерСтроки =НомерСтроки+1;
КонецЦикла;



//Получение и заполнение области ПодвалТаблицыЭлемента

Область = Макет.ПолучитьОбласть("ПодвалТаблицыЭлемента");
Область.Параметры.код3 = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");
ТабДок.Вывести(Область);


//Получение и заполнение области ПодвалТаблицыПоРаботе

Область = Макет.ПолучитьОбласть("ПодвалТаблицыПоРаботе");
ТабДок.Присоединить(Область);


//Получение и заполнение области ПодвалТаблицыИтогов

Область = Макет.ПолучитьОбласть("ПодвалТаблицыИтогов");
Область.Параметры.ОбщаяСумма = 0; 
Область.Параметры.ОбщееКоличествоЧасов = 0;
Для Каждого Строка Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Область.Параметры.ОбщаяСумма = Область.Параметры.ОбщаяСумма + Строка.ОбъемРабот;
	Область.Параметры.ОбщееКоличествоЧасов = Область.Параметры.ОбщееКоличествоЧасов + Строка.Нормочасы;
КонецЦикла;

Область.Параметры.РезервЧасов = РезервВремени;
Область.Параметры.РезервСуммы = РезервВремени * СтоимостьЧасаРабот;
Область.Параметры.ИтогоЧасов  = Область.Параметры.РезервЧасов + Область.Параметры.ОбщееКоличествоЧасов;
Область.Параметры.ИтогоДенег  = Область.Параметры.РезервСуммы + Область.Параметры.ОбщаяСумма;
ТабДок.Присоединить(Область);



//Получение и заполнение области Подвал

Область = Макет.ПолучитьОбласть("Подвал");
ТабДок.Вывести(Область);
ТабДок.АвтоМасштаб = Истина; 


//Объединение ячеек 

Строка = 18;
Счётчик = 18;
Пока Строка > 0 Цикл
	Если ТабДок.Область("R"+ Строка +"C3").Текст =ТабДок.Область("R"+(Счётчик+1)+"C3").Текст Тогда
		Если ЗначениеЗаполнено(ТабДок.Область("R" + Строка + "C3").Текст) тогда
        Пока ТабДок.Область("R" + Строка + "C3").Текст = ТабДок.Область("R"+(Счётчик+1)+"C3").Текст Цикл
				ТабДок.Область("R"+Строка+"C2"+":"+"R"+(Счётчик+1)+"C2").Объединить();
				ТабДок.Область("R"+Строка+"C3"+":"+"R"+(Счётчик+1)+"C3").Объединить();
				ТабДок.Область("R"+Строка+"C4"+":"+"R"+(Счётчик+1)+"C4").Объединить();
				ТабДок.Область("R"+Строка+"C8"+":"+"R"+(Счётчик+1)+"C8").Объединить();
				ТабДок.Область("R"+Строка+"C9"+":"+"R"+(Счётчик+1)+"C9").Объединить();
				ТабДок.Область("R"+Строка+"C1"+":"+"R"+(Счётчик+1)+"C1").Объединить();
				ТабДок.Область("R"+Строка+"C7"+":"+"R"+(Счётчик+1)+"C7").Объединить();
				Счётчик = Счётчик + 1;
			КонецЦикла;
		Строка = Счётчик + 1;	
	КонецЕсли;
КонецЕсли;

	Если ТабДок.Область("R"+ Строка +"C3").Текст <> ТабДок.Область("R"+(Счётчик+1)+"C3").Текст Тогда	
	 Строка=Строка + 1;
	КонецЕсли;

	Если ТабДок.Область("R"+(Счётчик+2)+"C3").Текст = "" Тогда
		Строка=0;
		Счётчик = Счётчик + 8;
	КонецЕсли;
	КонецЦикла;

//Получение и изменение настроек ячейки 

	ТабДок.Область("R3C1"+":"+"R3C9").Объединить();
Область = ТабДок.Область("R3C1"+":"+"R3C9");
Область.Текст = НазваниеПроекта;
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.Область("R10C1"+":"+"R10C9").Объединить();
Область = ТабДок.Область("R10C1"+":"+"R10C9");
Область.Текст = "Перечень этапов и задач.";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.Область("R" + Счётчик + "C1"+":"+"R" + Счётчик + "C9").Объединить();
Область = ТабДок.Область("R" + Счётчик + "C1"+":"+"R" + Счётчик + "C9");
мШрифт = Новый Шрифт("Times New Roman", 11, Истина, , , ) ; 
Область.Шрифт = мШрифт; 
Область.Текст = "Подписи сторон";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.АвтоМасштаб = Истина;
Возврат ТабДок;	
	
	
КонецФункции

&НаСервере
Функция ПечататьПоБлокамНаСервере() 

// Создание таблицыЗначений из ДанныхСтруктуры

ТаблЗнач = Новый ТаблицаЗначений;
ТаблЗнач.Колонки.Добавить("ФункциональныйБлок");
ТаблЗнач.Колонки.Добавить("Нормочасы");
ТаблЗнач.Колонки.Добавить("ОбъемРабот");
ТаблЗнач.Колонки.Добавить("ОбязательноНа1Этапе",Новый ОписаниеТипов("Булево"));
Для Каждого Значения Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Строка = ТаблЗнач.Добавить();
	Строка.ФункциональныйБлок  = Значения.ФункциональныйБлок;
	Строка.Нормочасы           = Значения.Нормочасы;
	Строка.ОбъемРабот          = Значения.ОбъемРабот;
	Строка.ОбязательноНа1Этапе = Значения.ОбязательноНа1Этапе;
КонецЦикла;

ТаблЗнач.Свернуть("ФункциональныйБлок","Нормочасы,ОбъемРабот,ОбязательноНа1Этапе");


// получение макета

ТабДок = Новый ТабличныйДокумент;
Макет = Обработки.ЛБТ_АРМ.ПолучитьМакет("Макет");

//Получение и заполнение области ШапкаТаблицыЭлемента

Область = Макет.ПолучитьОбласть("ШапкатаблицыПоБлокам");
Область.Параметры.Наименование = НазваниеПроекта;
Область.Параметры.СтоимостьЧасаРабот = СтоимостьЧасаРабот;
ТабДок.Вывести(Область); 

//Получение и заполнение области ШапкаТаблицыИтогов

Область = Макет.ПолучитьОбласть("ПодшапкаИтогов2");
Область.Параметры.Дата = Формат(ТекущаяДата(),("ДЛФ=ДД"));
ТабДок.Присоединить(Область); 

//Получение и заполнение области Шапка Код

НомерСтроки = 1;
Область = Макет.ПолучитьОбласть("Код");
ТабДок.Вывести(Область); 
//Получение и заполнение области Шапка Наименование

Область = Макет.ПолучитьОбласть("Наименование");
ТабДок.Присоединить(Область);

//Получение и заполнение области Подшапка3(Обдасть названия столбов)

Область = Макет.ПолучитьОбласть("Подшапка3");
ТабДок.Присоединить(Область); 

	Для Каждого Строка Из ТаблЗнач Цикл
		Область = Макет.ПолучитьОбласть("НомерКода");
		Область.Параметры.Код = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");
		ТабДок.Вывести(Область); 
		Область = Макет.ПолучитьОбласть("Бизнес");
		Область.Параметры.НаименованиеБизнесПроцесса = Строка.ФункциональныйБлок;
		ТабДок.Присоединить(Область);
		НомерСтроки =НомерСтроки+1;
		Для Каждого Элемент Из ТаблЗнач Цикл
			Область = Макет.ПолучитьОбласть("СтрокаТаблицыИтогов");
			Если  Строка.ФункциональныйБлок = Элемент.ФункциональныйБлок тогда
				Область.Параметры.Нормочасы = Элемент.Нормочасы;
				Область.Параметры.Стоимость = Элемент.ОбъемРабот;
				Область.Параметры.ОбязательноНа1Этапе = Элемент.ОбязательноНа1Этапе;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
//Получение и заполнение области ПодвалКод

Область 				= Макет.ПолучитьОбласть("ПодвалКод"); 
Область.Параметры.Код3  = Формат(НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=");	
ТабДок.Вывести(Область);    

//Получение и заполнение области ПодвалНаименование 

Область = Макет.ПолучитьОбласть("ПодвалНаименование");	
ТабДок.Присоединить(Область); 

//Получение и заполнение области ПодвалТаблицыИтогов

Область = Макет.ПолучитьОбласть("ПодвалТаблицыИтогов");
Область.Параметры.ОбщаяСумма = 0; 
Область.Параметры.ОбщееКоличествоЧасов = 0;
Для Каждого Строка Из ТаблицаЭлементовДобавленныхВПроект Цикл
	Область.Параметры.ОбщаяСумма = Область.Параметры.ОбщаяСумма + Строка.ОбъемРабот;
	Область.Параметры.ОбщееКоличествоЧасов = Область.Параметры.ОбщееКоличествоЧасов + Строка.Нормочасы;
КонецЦикла;

Область.Параметры.РезервЧасов = РезервВремени;
Область.Параметры.РезервСуммы = РезервВремени * СтоимостьЧасаРабот;
Область.Параметры.ИтогоЧасов  = Область.Параметры.РезервЧасов + Область.Параметры.ОбщееКоличествоЧасов;
Область.Параметры.ИтогоДенег  = Область.Параметры.РезервСуммы + Область.Параметры.ОбщаяСумма;
ТабДок.Присоединить(Область);

////Получение и заполнение области Подвал

Область = Макет.ПолучитьОбласть("ПодвалЗаказчикПоБлокам");
ТабДок.Вывести(Область);  

Область = Макет.ПолучитьОбласть("ПодвалИсполнительПоБлокам");
ТабДок.Присоединить(Область);

ТабДок.АвтоМасштаб = Истина; 

//Получение и изменение настроек ячеек

ТабДок.Область("R3C1"+":"+"R3C5").Объединить();
Область = ТабДок.Область("R3C1"+":"+"R3C5");
Область.Текст = НазваниеПроекта;
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.Область("R10C1"+":"+"R10C5").Объединить();
Область = ТабДок.Область("R10C1"+":"+"R10C5");
Область.Текст = "Перечень этапов и задач.";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.Область("R27C1"+":"+"R27C5").Объединить();
Область = ТабДок.Область("R27C1"+":"+"R27C5");
мШрифт = Новый Шрифт("Times New Roman", 11, Истина, , , ) ; 
Область.Шрифт = мШрифт; 
Область.Текст = "Подписи сторон";
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

ТабДок.АвтоМасштаб = Истина;

Возврат ТабДок; 


КонецФункции

&НаКлиенте
Процедура СтоимостьЧасаРаботПриИзменении(Элемент)
	Модифицированность = истина;
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
КонецПроцедуры

&НаКлиенте
Процедура РезервВремениПриИзменении(Элемент)
	Модифицированность = истина;
	Элементы.ГруппаТребуетсяПересчет.Видимость = истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОткрытьДокумент",
	ЭтотОбъект);

	ПоказатьВопрос(Оповещение,
		"Заполенные данные будут удалены. Продолжить?",
		РежимДиалогаВопрос.ДаНетОтмена,
		0,
		КодВозвратаДиалога.Да,
		"Предупреждение"
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОткрытьДокумент(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Документ.ЛБТ_ПроектВнедрения.ФормаВыбора",,ЭтаФорма);
		Модифицированность = истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокумент(Команда)
	СоздатьДокументНаСервере();
	Модифицированность = ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПроект(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьФорму",
	ЭтотОбъект);

	ПоказатьВопрос(Оповещение,
		"Заполеннные данные будут удалены. Продолжить?",
		РежимДиалогаВопрос.ДаНетОтмена,
		0,
		КодВозвратаДиалога.Да,
		"Предупреждение"
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьФорму(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьПроектНаСервере();
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Включены все виды работ";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ЦветМорскойВолны;
		Элементы.СоздатьДокумент.Видимость = Истина;
		Элементы.СохранитьДокумент.Видимость = Ложь;
		Модифицированность = ложь;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ОчиститьПроектНаСервере()
	НазваниеПроекта = "";
	Объект.НаправлениеДеятельности = неопределено;
	Объект.Конфигурация = неопределено;
	Объект.Шаблон = неопределено;
	Объект.МасштабВнедрения = неопределено;
	СсылкаНаДокумент = неопределено;
	СтоимостьЧасаРабот = 0;
	СтоимостьРабот = 0;
	РезервВремени = 0;
	КоличествоЧасовОбщее = 0;
	КоэффициентСтоимости = 0;
	ИтоговаяСтоимость = 0;

	ТаблицаЭлементовДобавленныхВПроект.Очистить();
	ТЗИсключитьВидыРабот.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПроектаПриИзменении(Элемент)
	Модифицированность = истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДанныеИзДокументаВАРМ();
	Если ТЗИсключитьВидыРабот.Количество() > 0 Тогда
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Некоторые виды работ исключены";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ТемноКрасный;
	Иначе 
		Элементы.СтатусВыбораВидовРабот.Заголовок = "Включены все виды работ";
		Элементы.СтатусВыбораВидовРабот.ЦветТекста = WebЦвета.ЦветМорскойВолны;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти







