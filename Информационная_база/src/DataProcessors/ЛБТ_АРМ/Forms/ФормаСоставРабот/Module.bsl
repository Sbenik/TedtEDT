
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДеревоНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоНаФорме();
	
	ТЗДляОбмена.Очистить();
	ВладелецФормы.СкопироватьТЗВДочернююФорму(ТЗДляОбмена);
	ПреобразоватьТЗВДеревоЗначений();
	
	ТЗОбязательноНа1Этапе = ТЗДляОбмена.НайтиСтроки(Новый Структура("ОбязательноНа1Этапе",истина));
	
	Для каждого стр из ТЗОбязательноНа1Этапе Цикл
		ОбязательноНа1Этапе.Добавить(стр.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьТЗВДеревоЗначений()
	
	ФункциональныеБлоки = Новый ТаблицаЗначений;
	ФункциональныеБлоки.Колонки.Добавить("ФункциональныйБлок",Новый ОписаниеТипов("СправочникСсылка.ЛБТ_ФункциональныеБлоки"));
	ФункциональныеБлоки.Колонки.Добавить("ОбъемРабот",Новый ОписаниеТипов("Число"));
	ФункциональныеБлоки.Колонки.Добавить("Нормочасы",Новый ОписаниеТипов("Число"));
	
	Для каждого стр из ТЗДляОбмена Цикл
		стрН = ФункциональныеБлоки.Добавить();
		стрН.ФункциональныйБлок = стр.ФункциональныйБлок;
		стрН.ОбъемРабот = стр.ОбъемРабот;
		стрН.Нормочасы = стр.Нормочасы;
	КонецЦикла;
	
	ФункциональныеБлоки.Свернуть("ФункциональныйБлок","ОбъемРабот,Нормочасы");
	
	СоставРаботДЗ = РеквизитФормыВЗначение("СоставРабот");
	СоставРаботДЗ.Строки.Очистить();
	
	Для каждого стрФункциональныеБлоки из ФункциональныеБлоки Цикл
		
		СтрокаВерхнегоУровня = СоставРаботДЗ.Строки.Добавить();
		СтрокаВерхнегоУровня.НазваниеЗадачиАвтоматизации = стрФункциональныеБлоки.ФункциональныйБлок;
		СтрокаВерхнегоУровня.Нормочасы = стрФункциональныеБлоки.Нормочасы;
		СтрокаВерхнегоУровня.ТребуетсяДобавитьВПроект = истина;
		СтрокаВерхнегоУровня.ОбъемРабот = стрФункциональныеБлоки.ОбъемРабот;
		
		МассивНайденныхСтрок = ТЗДляОбмена.НайтиСтроки(Новый Структура("ФункциональныйБлок",стрФункциональныеБлоки.ФункциональныйБлок));
		
		ОбязательноУВсехПодчиненных = ложь;
		
		Для каждого стрНайденныеСтроки из МассивНайденныхСтрок Цикл
			
			СтрокаНижнегоУровня = СтрокаВерхнегоУровня.Строки.Добавить();
			СтрокаНижнегоУровня.НазваниеЗадачиАвтоматизации = стрНайденныеСтроки.Ссылка;
			СтрокаНижнегоУровня.ТребуетсяДобавитьВПроект = истина;
			СтрокаНижнегоУровня.Нормочасы = стрНайденныеСтроки.Нормочасы;
			СтрокаНижнегоУровня.ОбъемРабот = стрНайденныеСтроки.ОбъемРабот;
			СтрокаНижнегоУровня.ОбязательноНа1Этапе = стрНайденныеСтроки.ОбязательноНа1Этапе;
			
			Если СтрокаНижнегоУровня.ОбязательноНа1Этапе и не ОбязательноУВсехПодчиненных Тогда
				ОбязательноУВсехПодчиненных = истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбязательноУВсехПодчиненных Тогда
			СтрокаВерхнегоУровня.ОбязательноНа1Этапе = истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(СоставРаботДЗ,"СоставРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура СоставРаботТребуетсяДобавитьВПроектПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СоставРабот.ТекущиеДанные;
	СоставРаботТребуетсяДобавитьВПроектПриИзмененииНаСервере(ТекущаяСтрока.ТребуетсяДобавитьВПроект,ТекущаяСтрока.НазваниеЗадачиАвтоматизации,"ТребуетсяДобавитьВПроект");
	
КонецПроцедуры

&НаСервере
Процедура СоставРаботТребуетсяДобавитьВПроектПриИзмененииНаСервере(БулевоЗначение,КолонкаНазваниеЗадачиАвтоматизации,ПолеДляИзменения)
	
	ДЗДляИзмененияПодчиненных = РеквизитФормыВЗначение("СоставРабот");
	
	МассивНайденныхСтрок = ДЗДляИзмененияПодчиненных.Строки.НайтиСтроки(Новый структура("НазваниеЗадачиАвтоматизации",КолонкаНазваниеЗадачиАвтоматизации),истина);
	Если ЗначениеЗаполнено(МассивНайденныхСтрок[0].Родитель) Тогда
		ИзменитьЗадачиВСпискеЗначенийЗадачаНеТребуется(КолонкаНазваниеЗадачиАвтоматизации,БулевоЗначение);
		Возврат;
	КонецЕсли;
	
	Для каждого стр из МассивНайденныхСтрок Цикл
		
		стр.ТребуетсяДобавитьВПроект = БулевоЗначение;
	
	КонецЦикла;
	
	Для каждого стр из МассивНайденныхСтрок[0].Строки Цикл
		
		стр.ТребуетсяДобавитьВПроект = БулевоЗначение;
		ИзменитьЗадачиВСпискеЗначенийЗадачаНеТребуется(стр.НазваниеЗадачиАвтоматизации,БулевоЗначение);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДляИзмененияПодчиненных,"СоставРабот");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗадачиВСпискеЗначенийЗадачаНеТребуется(Задача,БулевоЗначение)
	
	Если БулевоЗначение Тогда
		НайденнаяСтрока = ЗадачаНеТребуется.НайтиПоЗначению(Задача);
		ЗадачаНеТребуется.Удалить(НайденнаяСтрока);
	Иначе
		ЗадачаНеТребуется.Добавить(Задача);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставРаботОбязательноНаПервомЭтапеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.СоставРабот.ТекущиеДанные;
	МассивИзменитьЗадачи = ИзменитьПодчиненные(ТекущаяСтрока.НазваниеЗадачиАвтоматизации,ТекущаяСтрока.ОбязательноНа1Этапе);
	ВладелецФормы.ИзменитьОбязательноНа1Этапе(МассивИзменитьЗадачи,ТекущаяСтрока.ОбязательноНа1Этапе);

	//СоставРаботТребуетсяДобавитьВПроектПриИзмененииНаСервере(ТекущаяСтрока.ОбязательноНа1Этапе,ТекущаяСтрока.НазваниеЗадачиАвтоматизации,"ОбязательноНаПервомЭтапе");
КонецПроцедуры

&НаСервере
Функция ИзменитьПодчиненные(НазваниеЗадачиАвтоматизации,БулевоЗначение)
	
	МассивИзменитьЗадачи = Новый Массив;
	
	ДЗДляИзмененияПодчиненных = РеквизитФормыВЗначение("СоставРабот");
	
	МассивНайденныхСтрок = ДЗДляИзмененияПодчиненных.Строки.НайтиСтроки(Новый структура("НазваниеЗадачиАвтоматизации",НазваниеЗадачиАвтоматизации),истина);
	Если ЗначениеЗаполнено(МассивНайденныхСтрок[0].Родитель) Тогда
		МассивИзменитьЗадачи.Добавить(НазваниеЗадачиАвтоматизации);
		Возврат МассивИзменитьЗадачи;
	КонецЕсли;
	
	Для каждого стр из МассивНайденныхСтрок Цикл
		стр.ОбязательноНа1Этапе = БулевоЗначение;
	КонецЦикла;
	
	Для каждого стр из МассивНайденныхСтрок[0].Строки Цикл
		стр.ОбязательноНа1Этапе = БулевоЗначение;
		МассивИзменитьЗадачи.Добавить(стр.НазваниеЗадачиАвтоматизации);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДляИзмененияПодчиненных,"СоставРабот");
	
	Возврат МассивИзменитьЗадачи;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	Если не ЗначениеЗаполнено(ВладелецФормы.Объект.Шаблон) Тогда
		Сообщить("Шаблон не выбран");
		Возврат;
	КонецЕсли;	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Конфигурация", ВладелецФормы.объект.Конфигурация);
	ПараметрыОтбора.Вставить("СтоимостьЧасаРабот",ВладелецФормы.СтоимостьЧасаРабот);
	ПараметрыОтбора.Вставить("Шаблон",ВладелецФормы.Объект.Шаблон);
	ПараметрыОтбора.Вставить("ИсключитьВидыРабот",ВладелецФормы.ТЗИсключитьВидыРабот);
	ПараметрыОтбора.Вставить("НаправлениеДеятельности",ВладелецФормы.Объект.НаправлениеДеятельности);
	ФормаВыбора = ОткрытьФорму("Справочник.ЛБТ_ЗадачиАвтоматизации.ФормаВыбора", ПараметрыОтбора, ВладелецФормы );

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьДеревоЗначенийНаФормеСоставаРабот" Тогда
		ОбновитьДеревоНаФорме();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	ВладелецФормы.ИзменитьСписокЗадач(ЗадачаНеТребуется);
	Закрыть()
КонецПроцедуры
